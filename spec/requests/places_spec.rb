 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/places", type: :request do
  # Place. As you add validations to Place, be sure to
  # adjust the attributes here as well.
  let!(:user) {FactoryBot.create(:user)}
  let(:valid_attributes) {
    {name: "Newtown", latitude: 22.5754, longitude: 88.4798, user_id: user.id}
  }

  let(:invalid_attributes) {
    {name: "Newtown", latitude: "qwertyuiop", user_id: "qwerty"}
  }

  describe "GET /index" do
    it "renders a successful response" do
      sign_in user
      Place.create! valid_attributes
      get places_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      sign_in user
      place = Place.create! valid_attributes
      get place_url(place)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      sign_in user
      get new_place_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      sign_in user
      place = Place.create! valid_attributes
      get edit_place_url(place)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Place" do
        sign_in user
        expect {
          post places_url, params: { place: valid_attributes }
        }.to change(Place, :count).by(1)
      end

      it "redirects to the created place" do
        sign_in user
        post places_url, params: { place: valid_attributes }
        expect(response).to redirect_to(place_url(Place.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Place" do
        sign_in user
        expect {
          post places_url, params: { place: invalid_attributes }
        }.to change(Place, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        sign_in user
        post places_url, params: { place: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {name: "Newtown", latitude: 22.9876, longitude: 88.1234, user_id: user.id}
      }

      it "updates the requested place" do
        sign_in user
        place = Place.create! valid_attributes
        patch place_url(place), params: { place: new_attributes }
        place.reload
        expect(place.latitude).to eq(22.9876)
      end

      it "redirects to the place" do
        sign_in user
        place = Place.create! valid_attributes
        patch place_url(place), params: { place: new_attributes }
        place.reload
        expect(response).to redirect_to(place_url(place))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        sign_in user
        place = Place.create! valid_attributes
        patch place_url(place), params: { place: invalid_attributes }
        expect(response).to be_redirect
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested place" do
      sign_in user
      place = Place.create! valid_attributes
      expect {
        delete place_url(place)
      }.to change(Place, :count).by(-1)
    end

    it "redirects to the places list" do
      sign_in user
      place = Place.create! valid_attributes
      delete place_url(place)
      expect(response).to redirect_to(places_url)
    end
  end
end
